package com.test;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;
import java.util.*;

public class GeneSiteDetectionProcessor {

    //=============================================
    //           Test -- start
    //=============================================
    public static void main(String[] args) {
        Integer[] resultParamIn = new Integer[]{0,1};
        String[]  result = new String[]{
                        "[rs144848][0][肿瘤基础0新增][HD9][17500458]\n" +
                        "[rs17401966][0][肿瘤基础0新增][HD9][17500458]\n" +
                        "[rs2240688][0][肿瘤基础0新增][HD9][17500458]\n" +
                        "[rs2274223][0][肿瘤基础0新增][HD9][17500458]\n" +
                        "[rs2308327][AA][肿瘤基础0新增][HD9][17500458]\n" +
                        "[rs4430796][AA][肿瘤基础0新增][HD9][17500458]\n" +
                        "[rs4939827][0][肿瘤基础0新增][HD9][17500458]\n" +
                        "[rs6983267][TT][肿瘤基础0新增][HD9][17500458]\n" +
                        "[rs719725][0][肿瘤基础0新增][HD9][17500458]\n" +
                        "[rs7574865][0][肿瘤基础0新增][HD9][17500458]\n" +
                        "[rs763317][0][肿瘤基础0新增][HD9][17500458]\n" +
                        "[rs9485372][0][肿瘤基础0新增][HD9][17500458]"
        };
        String[] arrayDSP = new String[]{
                "[套餐][产品编号][检测内容][基因名称][基因位点][基因型][中国人群占比][风险/正常][相对风险值][中国人群平均遗传风险指数][检测者遗传风险指数][风险等级]\n" +
                "[肿瘤类疾病][yg002][肺癌][MGMT][rs2308327][AA][0.972][风险][1.0113478283075248][19.3]\n" +
                "[肿瘤类疾病][yg002][肺癌][MGMT][rs2308327][AG][0.028][正常][0.6068036647300529][19.3]\n" +
                "[肿瘤类疾病][yg002][肺癌][MGMT][rs2308327][GG][0.0][正常][0.1011328957548911][19.3]\n" +
                "[肿瘤类疾病][yg002][肺癌][EGFR][rs763317][AA][0.036][风险][2.550063395155563][19.3]\n" +
                "[肿瘤类疾病][yg002][肺癌][EGFR][rs763317][AG][0.333][风险][1.3546879827038074][19.3]\n" +
                "[肿瘤类疾病][yg002][肺癌][EGFR][rs763317][GG][0.631][正常][0.7244227165924314][19.3]\n" +
                "[肿瘤类疾病][yg002][胃癌][PLCE1][rs2274223][AA][0.585][正常][0.8122292484564599][18.4]\n" +
                "[肿瘤类疾病][yg002][胃癌][PLCE1][rs2274223][AG][0.351][风险][1.2183540159080484][18.4]\n" +
                "[肿瘤类疾病][yg002][胃癌][PLCE1][rs2274223][GG][0.063][风险][1.543258698770563][18.4]\n" +
                "[肿瘤类疾病][yg002][胃癌][PROM1][rs2240688][TT][0.532][正常][0.772099713589611][18.4]\n" +
                "[肿瘤类疾病][yg002][胃癌][PROM1][rs2240688][GT][0.397][风险][1.1736012240784304][18.4]\n" +
                "[肿瘤类疾病][yg002][胃癌][PROM1][rs2240688][GG][0.071][风险][1.7372587273363742][18.4]\n" +
                "[肿瘤类疾病][yg002][肝癌][STAT4][rs7574865][TT][0.113][正常][0.5770808308463555][22.2]\n" +
                "[肿瘤类疾病][yg002][肝癌][STAT4][rs7574865][GT][0.468][正常][0.8194588514191201][22.2]\n" +
                "[肿瘤类疾病][yg002][肝癌][STAT4][rs7574865][GG][0.419][风险][1.315764218422262][22.2]\n" +
                "[肿瘤类疾病][yg002][肝癌][KIF1B][rs17401966][AA][0.53][风险][1.26640344941696][22.2]\n" +
                "[肿瘤类疾病][yg002][肝癌][KIF1B][rs17401966][AG][0.365][正常][0.7698561310400454][22.2]\n" +
                "[肿瘤类疾病][yg002][肝癌][KIF1B][rs17401966][GG][0.105][正常][0.4555332369576848][22.2]\n" +
                "[肿瘤类疾病][yg002][大肠癌][SMAD7][rs4939827][TT][0.125][风险][1.275272446017186][4.1]\n" +
                "[肿瘤类疾病][yg002][大肠癌][SMAD7][rs4939827][CT][0.371][风险][1.0627224078739228][4.1]\n" +
                "[肿瘤类疾病][yg002][大肠癌][SMAD7][rs4939827][CC][0.504][正常][0.8855987909805305][4.1]\n" +
                "[肿瘤类疾病][yg002][大肠癌][TPD52L3||UHRF2][rs719725][AA][0.544][风险][1.2009903366315864][4.1]\n" +
                "[肿瘤类疾病][yg002][大肠癌][TPD52L3||UHRF2][rs719725][AC][0.387][正常][0.8006536536428339][4.1]\n" +
                "[肿瘤类疾病][yg002][大肠癌][TPD52L3||UHRF2][rs719725][CC][0.069][正常][0.5337661821226226][4.1]\n" +
                "[肿瘤类疾病][yg002][甲状腺癌][FOX1E][rs1867277][AA][0.018][风险][1.7857796580053376][4.7]\n" +
                "[肿瘤类疾病][yg002][甲状腺癌][FOX1E][rs1867277][AG][0.204][风险][1.339322485862893][4.7]\n" +
                "[肿瘤类疾病][yg002][甲状腺癌][FOX1E][rs1867277][GG][0.778][正常][0.8928734856307639][4.7]\n" +
                "[肿瘤类疾病][yg002][甲状腺癌][BCL2][rs2279115][GG][0.323][风险][1.372381174328115][4.7]\n" +
                "[肿瘤类疾病][yg002][甲状腺癌][BCL2][rs2279115][GT][0.518][正常][0.893222076785753][4.7]\n" +
                "[肿瘤类疾病][yg002][甲状腺癌][BCL2][rs2279115][TT][0.159][正常][0.5915341408365891][4.7]\n" +
                "[@FORMULA][@RESULT_CELL_x_10][@GROUP_COLUMN_2][@RESULT_TYPE_DOUBLE][var result = @CELL_0_8 * @CELL_1_8 * @CELL_x_9;]\n" +
                "[@FORMULA][@RESULT_CELL_x_11][@GROUP_COLUMN_2][@RESULT_TYPE_INT][var result = 1; if (@CELL_0_10 < 0.8) { result = 1; } else if (@CELL_0_10 < 1.25) { result = 2; } else if (@CELL_0_10 < 1.5) { result = 3; } else { result = 4;}]\n" +
                "[@RESULT_DSP_PARAM_4_5]",

                "[套餐][产品编号][检测内容][基因名称][基因位点][基因型][中国人群频率][风险/正常][相对风险值][中国人群平均遗传风险指数][检测者遗传风险指数][风险等级]\n" +
                        "[肿瘤男18女19项][JZJY08-1][鼻咽癌][GABBR1][rs29232][CC][0.252][正常][0.553209808420869][21.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][鼻咽癌][GABBR1][rs29232][CT][0.472][正常][0.9238910319334092][21.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][鼻咽癌][GABBR1][rs29232][TT][0.276][风险][1.5380588345330268][21.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][鼻咽癌][GABBR1][rs29232][0][--][--][1.0][21.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][鼻咽癌][TNFRSF19][rs9510787][AA][0.46][正常][0.881680883718459][21.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][鼻咽癌][TNFRSF19][rs9510787][AG][0.431][风险][1.0580337603095673][21.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][鼻咽癌][TNFRSF19][rs9510787][GG][0.109][风险][1.269664560986836][21.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][鼻咽癌][TNFRSF19][rs9510787][0][--][--][1.0][21.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][大肠癌][BMP2][rs1015563][TT][0.076][风险][1.2230636044004206][4.1]\n" +
                        "[肿瘤男18女19项][JZJY08-1][大肠癌][BMP2][rs1015563][TC][0.462][风险][1.054349255326527][4.1]\n" +
                        "[肿瘤男18女19项][JZJY08-1][大肠癌][BMP2][rs1015563][CC][0.462][正常][0.9089099403579693][4.1]\n" +
                        "[肿瘤男18女19项][JZJY08-1][大肠癌][BMP2][rs1015563][0][--][--][1.0][4.1]\n" +
                        "[肿瘤男18女19项][JZJY08-1][大肠癌][SMAD7][rs4939827][TT][0.12][风险][1.2779586682937343][4.1]\n" +
                        "[肿瘤男18女19项][JZJY08-1][大肠癌][SMAD7][rs4939827][TC][0.37][风险][1.0649452537159128][4.1]\n" +
                        "[肿瘤男18女19项][JZJY08-1][大肠癌][SMAD7][rs4939827][CC][0.51][正常][0.8874402791480462][4.1]\n" +
                        "[肿瘤男18女19项][JZJY08-1][大肠癌][SMAD7][rs4939827][0][--][--][1.0][4.1]\n" +
                        "[肿瘤男18女19项][JZJY08-1][大肠癌][COLCA1][rs3802842][CC][0.163][风险][1.2809109226827116][4.1]\n" +
                        "[肿瘤男18女19项][JZJY08-1][大肠癌][COLCA1][rs3802842][CA][0.504][风险][1.0279951268974803][4.1]\n" +
                        "[肿瘤男18女19项][JZJY08-1][大肠癌][COLCA1][rs3802842][AA][0.331][正常][0.8250212293751472][4.1]\n" +
                        "[肿瘤男18女19项][JZJY08-1][大肠癌][COLCA1][rs3802842][0][--][--][1.0][4.1]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肝癌][KIF1B][rs17401966][AA][0.466][风险][1.3109371234012772][22.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肝癌][KIF1B][rs17401966][GA][0.413][正常][0.7993153022722933][22.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肝癌][KIF1B][rs17401966][GG][0.121][正常][0.4873737716328737][22.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肝癌][KIF1B][rs17401966][0][--][--][1.0][22.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肝癌][HLA-DQB1][rs9275572][AA][0.072][风险][1.45231581217185][22.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肝癌][HLA-DQB1][rs9275572][AG][0.38][风险][1.1171324962160385][22.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肝癌][HLA-DQB1][rs9275572][GG][0.548][正常][0.8593128601849488][22.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肝癌][HLA-DQB1][rs9275572][0][--][--][1.0][22.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肝癌][GRIK1][rs455804][CC][0.461][风险][1.1187861872485936][22.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肝癌][GRIK1][rs455804][AC][0.389][正常][0.9401414278133742][22.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肝癌][GRIK1][rs455804][AA][0.15][正常][0.7900241984893956][22.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肝癌][GRIK1][rs455804][0][--][--][1.0][22.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][膀胱癌][MYC][rs9642880][TT][0.12][风险][1.2768844054288164][14.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][膀胱癌][MYC][rs9642880][TG][0.433][风险][1.0552554359332598][14.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][膀胱癌][MYC][rs9642880][GG][0.447][正常][0.8720976340740751][14.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][膀胱癌][MYC][rs9642880][0][--][--][1.0][14.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][膀胱癌][TACC3][rs798766][TT][0.024][风险][1.4250083914050233][14.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][膀胱癌][TACC3][rs798766][TC][0.149][风险][1.1680127993075153][14.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][膀胱癌][TACC3][rs798766][CC][0.827][正常][0.9573694910649108][14.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][膀胱癌][TACC3][rs798766][0][--][--][1.0][14.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][食管癌][ALDH2][rs671][AA][0.063][风险][2.114471465795209][44.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][食管癌][ALDH2][rs671][AG][0.308][风险][1.2660544427519325][44.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][食管癌][ALDH2][rs671][GG][0.629][正常][0.7580819661862479][44.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][食管癌][ALDH2][rs671][0][--][--][1.0][44.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][食管癌][CASP8][rs13016963][AA][0.092][风险][1.3643270827614795][44.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][食管癌][CASP8][rs13016963][AG][0.466][风险][1.0742454031860815][44.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][食管癌][CASP8][rs13016963][GG][0.442][正常][0.8458452309589198][44.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][食管癌][CASP8][rs13016963][0][--][--][1.0][44.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][食管癌][ADH1B][rs1229984][CC][0.0673076923][风险][2.1893855013325583][44.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][食管癌][ADH1B][rs1229984][CT][0.3990384615][风险][1.2230146127951187][44.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][食管癌][ADH1B][rs1229984][TT][0.5336538462][正常][0.6832153778441771][44.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][食管癌][ADH1B][rs1229984][0][--][--][1.0][44.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胃癌][MUC1][rs4072037][TT][0.668][正常][0.8953871935824321][18.4]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胃癌][MUC1][rs4072037][CT][0.307][风险][1.1819414084899038][18.4]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胃癌][MUC1][rs4072037][CC][0.025][风险][1.560215479652924][18.4]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胃癌][MUC1][rs4072037][0][--][--][1.0][18.4]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胃癌][CHEK2][rs738722][TT][0.091][风险][1.4343057653026838][18.4]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胃癌][CHEK2][rs738722][TC][0.385][风险][1.1032794400305463][18.4]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胃癌][CHEK2][rs738722][CC][0.524][正常][0.8486571518506693][18.4]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胃癌][CHEK2][rs738722][0][--][--][1.0][18.4]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胃癌][DNAH11][rs2285947][AA][0.077][风险][1.2524189127089447][18.4]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胃癌][DNAH11][rs2285947][AG][0.38][风险][1.070426079374521][18.4]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胃癌][DNAH11][rs2285947][GG][0.543][正常][0.914881348260346][18.4]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胃癌][DNAH11][rs2285947][0][--][--][1.0][18.4]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胆囊癌][CNTN4][rs975334][GG][0.036][风险][4.360732871671381][6.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胆囊癌][CNTN4][rs975334][AG][0.341][风险][1.5127361866923867][6.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胆囊癌][CNTN4][rs975334][AA][0.623][正常][0.5252091974610833][6.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胆囊癌][CNTN4][rs975334][0][--][--][1.0][6.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胆囊癌][LOC105369289][rs13294589][AA][0.825][正常][0.9003294048824328][6.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胆囊癌][LOC105369289][rs13294589][AG][0.171][风险][1.4496016027909278][6.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胆囊癌][LOC105369289][rs13294589][GG][0.004][风险][2.332151990552792][6.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胆囊癌][LOC105369289][rs13294589][0][--][--][1.0][6.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胆囊癌][DCC][rs7504990][TT][0.06][风险][3.5732183535710216][6.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胆囊癌][DCC][rs7504990][CT][0.361][风险][1.351898754912326][6.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胆囊癌][DCC][rs7504990][CC][0.579][正常][0.5139913966932961][6.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][胆囊癌][DCC][rs7504990][0][--][--][1.0][6.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺腺癌][TERT][rs2736100][CC][0.13][风险][1.3193464426009134][19.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺腺癌][TERT][rs2736100][CA][0.529][风险][1.0388293849880768][19.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺腺癌][TERT][rs2736100][AA][0.341][正常][0.8179597237760706][19.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺腺癌][TERT][rs2736100][0][--][--][1.0][19.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺腺癌][TP63][rs10937405][CC][0.482][风险][1.1625683338183515][19.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺腺癌][TP63][rs10937405][CT][0.415][正常][0.8906008458485841][19.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺腺癌][TP63][rs10937405][TT][0.103][正常][0.6798351491871389][19.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺腺癌][TP63][rs10937405][0][--][--][1.0][19.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺鳞癌][TP63][rs4488809][CC][0.288][风险][1.2303248846017956][12.8]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺鳞癌][TP63][rs4488809][TC][0.466][正常][0.9764261323254867][12.8]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺鳞癌][TP63][rs4488809][TT][0.246][正常][0.7749273991228505][12.8]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺鳞癌][TP63][rs4488809][0][--][--][1.0][12.8]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺鳞癌][SLC17A8][rs12296850][AA][0.569][正常][0.8707093988682428][12.8]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺鳞癌][SLC17A8][rs12296850][AG][0.347][风险][1.1145323523394561][12.8]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺鳞癌][SLC17A8][rs12296850][GG][0.083][风险][1.4193260096796105][12.8]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺鳞癌][SLC17A8][rs12296850][0][--][--][1.0][12.8]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺鳞癌][CHRNA3][rs8040868][TT][0.401][正常][0.823664787517312][12.8]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺鳞癌][CHRNA3][rs8040868][CT][0.49][风险][1.0625502938688456][12.8]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺鳞癌][CHRNA3][rs8040868][CC][0.109][风险][1.3673500815973283][12.8]\n" +
                        "[肿瘤男18女19项][JZJY08-1][肺鳞癌][CHRNA3][rs8040868][0][--][--][1.0][12.8]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小细胞肺癌][BRCA2][rs11571833][AA][1.0][正常][0.9999777786502239][11.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小细胞肺癌][BRCA2][rs11571833][AT][0.0][风险][2.1901846217362695][11.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小细胞肺癌][BRCA2][rs11571833][TT][0.0][风险][4.7915190124191955][11.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小细胞肺癌][BRCA2][rs11571833][0][--][--][1.0][11.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小细胞肺癌][DNAH11][rs2285947][AA][0.077][风险][1.2524189127089447][11.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小细胞肺癌][DNAH11][rs2285947][AG][0.38][风险][1.070426079374521][11.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小细胞肺癌][DNAH11][rs2285947][GG][0.543][正常][0.914881348260346][11.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小细胞肺癌][DNAH11][rs2285947][0][--][--][1.0][11.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][基底细胞癌][RHOU][rs801114][TT][0.343][正常][0.8103344426476703][3.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][基底细胞癌][RHOU][rs801114][TG][0.514][风险][1.0372491523414369][3.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][基底细胞癌][RHOU][rs801114][GG][0.143][风险][1.320905501366029][3.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][基底细胞癌][RHOU][rs801114][0][--][--][1.0][3.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][基底细胞癌][PADI6][rs7538876][AA][0.028][风险][1.4329516354706973][3.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][基底细胞癌][PADI6][rs7538876][AG][0.288][风险][1.1481691610240683][3.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][基底细胞癌][PADI6][rs7538876][GG][0.685][正常][0.9185164491505617][3.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][基底细胞癌][PADI6][rs7538876][0][--][--][1.0][3.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][基底细胞癌][TERT][rs2736100][CC][0.13][风险][1.2469145898098377][3.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][基底细胞癌][TERT][rs2736100][CA][0.529][风险][1.033382068071547][3.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][基底细胞癌][TERT][rs2736100][AA][0.341][正常][0.8540210570793527][3.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][基底细胞癌][TERT][rs2736100][0][--][--][1.0][3.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性髓性白血病][JAK2][rs77375493][GG][1.0][正常][0.9999777786502239][28.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性髓性白血病][JAK2][rs77375493][GT][0.0][风险][20.033625802968004][28.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性髓性白血病][JAK2][rs77375493][TT][0.0][风险][20.033625802968004][28.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性髓性白血病][JAK2][rs77375493][0][--][--][1.0][28.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性髓性白血病][WSB1][rs4795519][AA][0.248][正常][0.4861542533837246][28.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性髓性白血病][WSB1][rs4795519][AC][0.486][正常][0.8994186367416656][28.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性髓性白血病][WSB1][rs4795519][CC][0.266][风险][1.6628226549586034][28.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性髓性白血病][WSB1][rs4795519][0][--][--][1.0][28.3]\n" +
                        "[肿瘤男18女19项][JZJY08-1][急性髓性白血病][JAK2][rs77375493][GG][1.0][正常][0.9999777786502239][11.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][急性髓性白血病][JAK2][rs77375493][GT][0.0][风险][20.033625802968004][11.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][急性髓性白血病][JAK2][rs77375493][TT][0.0][风险][20.033625802968004][11.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][急性髓性白血病][JAK2][rs77375493][0][--][--][1.0][11.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][急性髓性白血病][TP53][rs11540652][GG][1.0][正常][0.9999777786502239][11.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][急性髓性白血病][TP53][rs11540652][AG][0.0][风险][20.033625802968004][11.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][急性髓性白血病][TP53][rs11540652][AA][0.0][风险][20.033625802968004][11.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][急性髓性白血病][TP53][rs11540652][0][--][--][1.0][11.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（女）][IRF4][rs872071][AA][0.482][正常][0.7324542270363933][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（女）][IRF4][rs872071][AG][0.415][风险][1.1280194454364367][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（女）][IRF4][rs872071][GG][0.103][风险][1.736072451947068][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（女）][IRF4][rs872071][0][--][--][1.0][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（女）][ACOXL][rs17483466][AA][0.984][正常][0.9937760609760018][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（女）][ACOXL][rs17483466][AG][0.016][风险][1.3813966476568311][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（女）][ACOXL][rs17483466][GG][0.0][风险][1.9181464786386195][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（女）][ACOXL][rs17483466][0][--][--][1.0][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（女）][MYC][rs2466035][TT][0.3][正常][0.7087734196141889][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（女）][MYC][rs2466035][CT][0.502][风险][1.0064850744216396][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（女）][MYC][rs2466035][CC][0.198][风险][1.4247258652017833][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（女）][MYC][rs2466035][0][--][--][1.0][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][遗传性结直肠癌（女）][APC][rs587779780][CC][1.0][正常][0.9999777786502239][5.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][遗传性结直肠癌（女）][APC][rs587779780][CT][0.0][风险][10.00783982303196][5.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][遗传性结直肠癌（女）][APC][rs587779780][TT][0.0][风险][20.033625802968004][5.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][遗传性结直肠癌（女）][APC][rs587779780][0][--][--][1.0][5.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][遗传性结直肠癌（女）][MSH6][rs63750552][GG][1.0][正常][0.9999777786502239][5.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][遗传性结直肠癌（女）][MSH6][rs63750552][GT][0.0][风险][10.00783982303196][5.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][遗传性结直肠癌（女）][MSH6][rs63750552][TT][0.0][风险][20.033625802968004][5.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][遗传性结直肠癌（女）][MSH6][rs63750552][0][--][--][1.0][5.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小肠癌（女）][APC][rs587779780][CC][1.0][正常][0.9999777786502239][14.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小肠癌（女）][APC][rs587779780][CT][0.0][风险][10.00783982303196][14.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小肠癌（女）][APC][rs587779780][TT][0.0][风险][20.033625802968004][14.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小肠癌（女）][APC][rs587779780][0][--][--][1.0][14.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小肠癌（女）][MSH6][rs63750552][GG][1.0][正常][0.9999777786502239][14.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小肠癌（女）][MSH6][rs63750552][GT][0.0][风险][10.00783982303196][14.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小肠癌（女）][MSH6][rs63750552][TT][0.0][风险][20.033625802968004][14.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小肠癌（女）][MSH6][rs63750552][0][--][--][1.0][14.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][脑胶质瘤][TERC][rs1920116][GG][0.182][风险][1.3445039358007114][4.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][脑胶质瘤][TERC][rs1920116][GA][0.438][风险][1.0342050745367208][4.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][脑胶质瘤][TERC][rs1920116][AA][0.38][正常][0.7955253704591089][4.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][脑胶质瘤][TERC][rs1920116][0][--][--][1.0][4.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][脑胶质瘤][TERT][rs2736100][CC][0.13][风险][1.2627033655689839][4.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][脑胶质瘤][TERT][rs2736100][CA][0.529][正常][0.9712849475750115][4.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][脑胶质瘤][TERT][rs2736100][AA][0.431][正常][0.7471272777423734][4.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][脑胶质瘤][TERT][rs2736100][0][--][--][1.0][4.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][脑胶质瘤][TNFRSF6B][rs6010620][GG][0.072][风险][1.648131472898513][4.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][脑胶质瘤][TNFRSF6B][rs6010620][GA][0.385][风险][1.1524883666483974][4.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][脑胶质瘤][TNFRSF6B][rs6010620][AA][0.543][正常][0.80591092144935][4.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][脑胶质瘤][TNFRSF6B][rs6010620][0][--][--][1.0][4.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][乳腺癌（女）][ESR1][rs2046210][AA][0.144][风险][1.3565680464751315][17.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][乳腺癌（女）][ESR1][rs2046210][AG][0.452][风险][1.0515744315450073][17.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][乳腺癌（女）][ESR1][rs2046210][GG][0.404][正常][0.8151567290586966][17.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][乳腺癌（女）][ESR1][rs2046210][0][--][--][1.0][17.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][乳腺癌（女）][FGFR2][rs2981579][AA][0.221][风险][1.2774255598291988][17.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][乳腺癌（女）][FGFR2][rs2981579][AG][0.471][风险][1.0058224469593429][17.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][乳腺癌（女）][FGFR2][rs2981579][GG][0.308][正常][0.7919710199992134][17.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][乳腺癌（女）][FGFR2][rs2981579][0][--][--][1.0][17.2]\n" +
                        "[肿瘤男18女19项][JZJY08-1][卵巢癌（女）][BNC2][rs3814113][CC][0.072][风险][1.4129756997979621][29.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][卵巢癌（女）][BNC2][rs3814113][CT][0.341][风险][1.1162211427829163][29.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][卵巢癌（女）][BNC2][rs3814113][TT][0.587][正常][0.8817961906147331][29.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][卵巢癌（女）][BNC2][rs3814113][0][--][--][1.0][29.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][卵巢癌（女）][TERT][rs2736100][CC][0.13][风险][1.2627033655689839][29.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][卵巢癌（女）][TERT][rs2736100][CA][0.529][正常][0.9712849475750115][29.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][卵巢癌（女）][TERT][rs2736100][AA][0.431][正常][0.7471272777423734][29.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][卵巢癌（女）][TERT][rs2736100][0][--][--][1.0][29.5]\n" +
                        "[肿瘤男18女19项][JZJY08-1][前列腺癌（男）][KLF4][rs817826][CC][0.005][风险][1.8444830474392937][11.7]\n" +
                        "[肿瘤男18女19项][JZJY08-1][前列腺癌（男）][KLF4][rs817826][CT][0.178][风险][1.308081207295894][11.7]\n" +
                        "[肿瘤男18女19项][JZJY08-1][前列腺癌（男）][KLF4][rs817826][TT][0.817][正常][0.9276855839542886][11.7]\n" +
                        "[肿瘤男18女19项][JZJY08-1][前列腺癌（男）][KLF4][rs817826][0][--][--][1.0][11.7]\n" +
                        "[肿瘤男18女19项][JZJY08-1][前列腺癌（男）][HNF1B][rs11263763][GG][0.056][正常][0.7367882102476102][11.7]\n" +
                        "[肿瘤男18女19项][JZJY08-1][前列腺癌（男）][HNF1B][rs11263763][AG][0.369][正常][0.898894658547421][11.7]\n" +
                        "[肿瘤男18女19项][JZJY08-1][前列腺癌（男）][HNF1B][rs11263763][AA][0.575][风险][1.0904810713895632][11.7]\n" +
                        "[肿瘤男18女19项][JZJY08-1][前列腺癌（男）][HNF1B][rs11263763][0][--][--][1.0][11.7]\n" +
                        "[肿瘤男18女19项][JZJY08-1][前列腺癌（男）][LILRA3][rs103294][CC][0.135][风险][1.35852700199273][11.7]\n" +
                        "[肿瘤男18女19项][JZJY08-1][前列腺癌（男）][LILRA3][rs103294][CT][0.428][风险][1.06132098876178][11.7]\n" +
                        "[肿瘤男18女19项][JZJY08-1][前列腺癌（男）][LILRA3][rs103294][TT][0.437][正常][0.8291397921189209][11.7]\n" +
                        "[肿瘤男18女19项][JZJY08-1][前列腺癌（男）][LILRA3][rs103294][0][--][--][1.0][11.7]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（男）][IRF4][rs872071][AA][0.482][正常][0.7324542270363933][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（男）][IRF4][rs872071][AG][0.415][风险][1.1280194454364367][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（男）][IRF4][rs872071][GG][0.103][风险][1.736072451947068][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（男）][IRF4][rs872071][0][--][--][1.0][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（男）][ACOXL][rs17483466][AA][0.984][正常][0.9937760609760018][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（男）][ACOXL][rs17483466][AG][0.016][风险][1.3813966476568311][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（男）][ACOXL][rs17483466][GG][0.0][风险][1.9181464786386195][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（男）][ACOXL][rs17483466][0][--][--][1.0][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（男）][PCAT29][rs7176508][AA][0.046][风险][1.6931837657754674][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（男）][PCAT29][rs7176508][AG][0.335][风险][1.1961263639332707][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（男）][PCAT29][rs7176508][GG][0.619][正常][0.8423158360341991][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][慢性淋巴细胞白血病（男）][PCAT29][rs7176508][0][--][--][1.0][2.0]\n" +
                        "[肿瘤男18女19项][JZJY08-1][遗传性结直肠癌（男）][APC][rs587779780][CC][1.0][正常][0.9999777786502239][5.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][遗传性结直肠癌（男）][APC][rs587779780][CT][0.0][风险][10.00783982303196][5.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][遗传性结直肠癌（男）][APC][rs587779780][TT][0.0][风险][20.033625802968004][5.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][遗传性结直肠癌（男）][APC][rs587779780][0][--][--][1.0][5.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][遗传性结直肠癌（男）][MSH2][rs63750458][TT][1.0][正常][0.9999777786502239][5.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][遗传性结直肠癌（男）][MSH2][rs63750458][TG][0.0][风险][10.00783982303196][5.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][遗传性结直肠癌（男）][MSH2][rs63750458][GG][0.0][风险][20.033625802968004][5.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][遗传性结直肠癌（男）][MSH2][rs63750458][0][--][--][1.0][5.6]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小肠癌（男）][APC][rs587779780][CC][1.0][正常][0.9999777786502239][14.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小肠癌（男）][APC][rs587779780][CT][0.0][风险][10.00783982303196][14.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小肠癌（男）][APC][rs587779780][TT][0.0][风险][20.033625802968004][14.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小肠癌（男）][APC][rs587779780][0][--][--][1.0][14.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小肠癌（男）][MSH2][rs63750458][TT][1.0][正常][0.9999777786502239][14.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小肠癌（男）][MSH2][rs63750458][TG][0.0][风险][10.00783982303196][14.9]\n" +
                        "[肿瘤男18女19项][JZJY08-1][小肠癌（男）][MSH2][rs63750458][GG][0.0][风险][20.033625802968004][14.9]\n" +
                        "[@FORMULA][@RESULT_CELL_x_10][@GROUP_COLUMN_2][@RESULT_TYPE_DOUBLE][var result=1; var val1=@CELL_0_8; var val2=@CELL_1_8; var val3=@CELL_2_8; if(null==val2){val2=1;} if(null==val3){val3=1;} result=val1*val2*val3*@CELL_0_9;]\n" +
                        "[@FORMULA][@RESULT_CELL_x_11][@GROUP_COLUMN_2][@RESULT_TYPE_DOUBLE][var result=1; var val1=@CELL_0_8; var val2=@CELL_1_8; var val3=@CELL_2_8; var is2null=false; var is3null=false; if(null==val2){val2=1; is2null=true;} if(null==val3){val3=1; is3null=true;} var value = val1*val2*val3; if (is2null && is3null) { value=value*value; } result = value;]\n" +
                        "[@RESULT_DSP_PARAM_4_5]",

                "[套餐][产品编号][检测内容][基因名称][基因位点][基因型][中国人群占比][风险/正常][相对风险值][中国人群平均遗传风险指数][检测者遗传风险指数][风险等级]\n" +
                "[肿瘤基础0新增][zljc0-xz][肺癌][MGMT][rs2308327][AA][0.972][风险][1.01][19.3]\n" +
                "[肿瘤基础0新增][zljc0-xz][肺癌][MGMT][rs2308327][AG][0.028][正常][0.61][19.3]\n" +
                "[肿瘤基础0新增][zljc0-xz][肺癌][MGMT][rs2308327][GG][0.0][正常][0.1][19.3]\n" +
                "[肿瘤基础0新增][zljc0-xz][肺癌][MGMT][rs2308327][0][--][--][1.0][19.3]\n" +
                "[肿瘤基础0新增][zljc0-xz][肺癌][EGFR][rs763317][AA][0.036][风险][2.55][19.3]\n" +
                "[肿瘤基础0新增][zljc0-xz][肺癌][EGFR][rs763317][AG][0.333][风险][1.35][19.3]\n" +
                "[肿瘤基础0新增][zljc0-xz][肺癌][EGFR][rs763317][GG][0.631][正常][0.72][19.3]\n" +
                "[肿瘤基础0新增][zljc0-xz][肺癌][EGFR][rs763317][0][--][--][1.0][19.3]\n" +
                "[肿瘤基础0新增][zljc0-xz][胃癌][PLCE1][rs2274223][AA][0.585][正常][0.81][18.4]\n" +
                "[肿瘤基础0新增][zljc0-xz][胃癌][PLCE1][rs2274223][AG][0.351][风险][1.22][18.4]\n" +
                "[肿瘤基础0新增][zljc0-xz][胃癌][PLCE1][rs2274223][GG][0.063][风险][1.54][18.4]\n" +
                "[肿瘤基础0新增][zljc0-xz][胃癌][PLCE1][rs2274223][0][--][--][1.0][18.4]\n" +
                "[肿瘤基础0新增][zljc0-xz][胃癌][PROM1][rs2240688][TT][0.532][正常][0.77][18.4]\n" +
                "[肿瘤基础0新增][zljc0-xz][胃癌][PROM1][rs2240688][GT][0.397][风险][1.17][18.4]\n" +
                "[肿瘤基础0新增][zljc0-xz][胃癌][PROM1][rs2240688][GG][0.071][风险][1.74][18.4]\n" +
                "[肿瘤基础0新增][zljc0-xz][胃癌][PROM1][rs2240688][0][--][--][1.0][18.4]\n" +
                "[肿瘤基础0新增][zljc0-xz][肝癌][STAT4][rs7574865][TT][0.113][正常][0.58][22.2]\n" +
                "[肿瘤基础0新增][zljc0-xz][肝癌][STAT4][rs7574865][GT][0.468][正常][0.82][22.2]\n" +
                "[肿瘤基础0新增][zljc0-xz][肝癌][STAT4][rs7574865][GG][0.419][风险][1.32][22.2]\n" +
                "[肿瘤基础0新增][zljc0-xz][肝癌][STAT4][rs7574865][0][--][--][1.0][22.2]\n" +
                "[肿瘤基础0新增][zljc0-xz][肝癌][KIF1B][rs17401966][AA][0.53][风险][1.27][22.2]\n" +
                "[肿瘤基础0新增][zljc0-xz][肝癌][KIF1B][rs17401966][AG][0.365][正常][0.77][22.2]\n" +
                "[肿瘤基础0新增][zljc0-xz][肝癌][KIF1B][rs17401966][GG][0.105][正常][0.46][22.2]\n" +
                "[肿瘤基础0新增][zljc0-xz][肝癌][KIF1B][rs17401966][0][--][--][1.0][22.2]\n" +
                "[肿瘤基础0新增][zljc0-xz][大肠癌][SMAD7][rs4939827][TT][0.125][风险][1.28][4.1]\n" +
                "[肿瘤基础0新增][zljc0-xz][大肠癌][SMAD7][rs4939827][CT][0.371][风险][1.06][4.1]\n" +
                "[肿瘤基础0新增][zljc0-xz][大肠癌][SMAD7][rs4939827][CC][0.504][正常][0.89][4.1]\n" +
                "[肿瘤基础0新增][zljc0-xz][大肠癌][SMAD7][rs4939827][0][--][--][1.0][4.1]\n" +
                "[肿瘤基础0新增][zljc0-xz][大肠癌][TPD52L3||UHRF2][rs719725][AA][0.544][风险][1.2][4.1]\n" +
                "[肿瘤基础0新增][zljc0-xz][大肠癌][TPD52L3||UHRF2][rs719725][AC][0.387][正常][0.8][4.1]\n" +
                "[肿瘤基础0新增][zljc0-xz][大肠癌][TPD52L3||UHRF2][rs719725][CC][0.069][正常][0.53][4.1]\n" +
                "[肿瘤基础0新增][zljc0-xz][大肠癌][TPD52L3||UHRF2][rs719725][0][--][--][1.0][4.1]\n" +
                "[肿瘤基础0新增][zljc0-xz][乳腺癌（女）][BRCA2][rs144848][AA][0.52][正常][0.8455948104155294][17.2]\n" +
                "[肿瘤基础0新增][zljc0-xz][乳腺癌（女）][BRCA2][rs144848][AC][0.391][风险][1.1077351543416902][17.2]\n" +
                "[肿瘤基础0新增][zljc0-xz][乳腺癌（女）][BRCA2][rs144848][CC][0.089][风险][1.4290723226485413][17.2]\n" +
                "[肿瘤基础0新增][zljc0-xz][乳腺癌（女）][BRCA2][rs144848][0][--][--][1.0][17.2]\n" +
                "[肿瘤基础0新增][zljc0-xz][乳腺癌（女）][TAB2][rs9485372][GG][0.335][风险][1.0994187922554741][17.2]\n" +
                "[肿瘤基础0新增][zljc0-xz][乳腺癌（女）][TAB2][rs9485372][AG][0.484][正常][0.9762814231293004][17.2]\n" +
                "[肿瘤基础0新增][zljc0-xz][乳腺癌（女）][TAB2][rs9485372][AA][0.181][正常][0.8795310692151371][17.2]\n" +
                "[肿瘤基础0新增][zljc0-xz][乳腺癌（女）][TAB2][rs9485372][0][--][--][1.0][17.2]\n" +
                "[肿瘤基础0新增][zljc0-xz][前列腺癌（男）][HNF1B][rs4430796][GG][0.087][正常][0.7843694003378281][11.7]\n" +
                "[肿瘤基础0新增][zljc0-xz][前列腺癌（男）][HNF1B][rs4430796][AG][0.379][正常][0.933402438057365][11.7]\n" +
                "[肿瘤基础0新增][zljc0-xz][前列腺癌（男）][HNF1B][rs4430796][AA][0.534][风险][1.0824363864097413][11.7]\n" +
                "[肿瘤基础0新增][zljc0-xz][前列腺癌（男）][HNF1B][rs4430796][0][--][--][1.0][11.7]\n" +
                "[肿瘤基础0新增][zljc0-xz][前列腺癌（男）][CCAT2][rs6983267][GG][0.171][风险][1.2965258293875732][11.7]\n" +
                "[肿瘤基础0新增][zljc0-xz][前列腺癌（男）][CCAT2][rs6983267][GT][0.435][风险][1.0534219866266459][11.7]\n" +
                "[肿瘤基础0新增][zljc0-xz][前列腺癌（男）][CCAT2][rs6983267][TT][0.395][正常][0.8103205668678559][11.7]\n" +
                "[肿瘤基础0新增][zljc0-xz][前列腺癌（男）][CCAT2][rs6983267][0][--][--][1.0][11.7]\n" +
                "[@FORMULA][@RESULT_CELL_x_10][@GROUP_COLUMN_2][@RESULT_TYPE_DOUBLE][var result=0;var v0='@CELL_0_5';var v1='@CELL_1_5';if('0'==v0&&'0'==v1){result=0.0;}else{result=@CELL_0_8*@CELL_1_8*@CELL_0_9;}]\n" +
                "[@FORMULA][@RESULT_CELL_x_11][@GROUP_COLUMN_2][@RESULT_TYPE_DOUBLE][var result=0;var v0='@CELL_0_5';var v1='@CELL_1_5';if('0'==v0&&'0'==v1){result=0.0;}else{result=@CELL_0_8*@CELL_1_8;}]\n" +
                "[@RESULT_DSP_PARAM_4_5]",

                "[套餐][产品编号][检测内容][基因名称][基因位点][基因型][中国人群占比][风险/正常][相对风险值][中国人群平均遗传风险指数][检测者遗传风险指数][风险等级]\n" +
                "[消化系统疾病][yg004][胃溃疡][IL8][rs4073][AA][0.159][风险][1.20][6.4]\n" +  /*等级标准：0-0.8；0.8-1.25；1.25-1.5；1.5以上*/
                "[消化系统疾病][yg004][胃溃疡][IL8][rs4073][AT][0.51][风险][1.03][6.4]\n" +
                "[消化系统疾病][yg004][胃溃疡][IL8][rs4073][TT][0.331][正常][0.86][6.4]\n" +
                "[消化系统疾病][yg004][胃溃疡][IL8][rs4073][0][--][--][1.0][6.4]\n" +
                "[消化系统疾病][yg004][胃溃疡][CMA1][rs1800875][CC][0.613][正常][0.92][6.4]\n" +
                "[消化系统疾病][yg004][胃溃疡][CMA1][rs1800875][CT][0.347][风险][1.11][6.4]\n" +
                "[消化系统疾病][yg004][胃溃疡][CMA1][rs1800875][TT][0.04][风险][1.29][6.4]\n" +
                "[消化系统疾病][yg004][胃溃疡][CMA1][rs1800875][0][--][--][1.0][6.4]\n" +
                "[消化系统疾病][yg004][原发性胆汁肝硬化][IL6][rs1800795][GG][0.998][正常][0.8][7.1]\n" +  /*等级标准：0.8 较低；1.0 平均；1.2 关注*/
                "[消化系统疾病][yg004][原发性胆汁肝硬化][IL6][rs1800795][CG][0.002][正常][1.0][7.1]\n" +
                "[消化系统疾病][yg004][原发性胆汁肝硬化][IL6][rs1800795][CC][0.0][风险][1.2][7.1]\n" +
                "[消化系统疾病][yg004][原发性胆汁肝硬化][IL6][rs1800795][0][--][--][1.0][7.1]\n" +
                "[消化系统疾病][yg004][肠息肉][TAF3||FLJ45983][rs4143094][TT][0.004][风险][1.36][1.3]\n" +  /*等级标准：0-0.8；0.8-1.25；1.25-1.5；1.5以上*/
                "[消化系统疾病][yg004][肠息肉][TAF3||FLJ45983][rs4143094][TG][0.085][风险][1.18][1.3]\n" +
                "[消化系统疾病][yg004][肠息肉][TAF3||FLJ45983][rs4143094][GG][0.911][正常][0.98][1.3]\n" +
                "[消化系统疾病][yg004][肠息肉][TAF3||FLJ45983][rs4143094][0][--][--][1.0][1.3]\n" +
                "[消化系统疾病][yg004][肠息肉][15q13][rs4779584][TT][0.653][风险][1.12][1.3]\n" +
                "[消化系统疾病][yg004][肠息肉][15q13][rs4779584][CT][0.315][正常][0.79][1.3]\n" +
                "[消化系统疾病][yg004][肠息肉][15q13][rs4779584][CC][0.032][正常][0.66][1.3]\n" +
                "[消化系统疾病][yg004][肠息肉][15q13][rs4779584][0][--][--][1.0][1.3]\n" +
                "[消化系统疾病][yg004][肠息肉][8q24][rs6983267][GG][0.171][风险][1.28][1.3]\n" +
                "[消化系统疾病][yg004][肠息肉][8q24][rs6983267][GT][0.435][风险][1.04][1.3]\n" +
                "[消化系统疾病][yg004][肠息肉][8q24][rs6983267][TT][0.395][正常][0.84][1.3]\n" +
                "[消化系统疾病][yg004][肠息肉][8q24][rs6983267][0][--][--][1.0][1.3]\n" +
                "[消化系统疾病][yg004][慢性胰腺炎][CFTR][rs75789129][AA][0.891][正常][0.97][20.3]\n" +  /*等级标准：0-0.8；0.8-1.25；1.25-1.5；1.5以上*/
                "[消化系统疾病][yg004][慢性胰腺炎][CFTR][rs75789129][AG][0.107][风险][1.26][20.3]\n" +
                "[消化系统疾病][yg004][慢性胰腺炎][CFTR][rs75789129][GG][0.002][风险][1.55][20.3]\n" +
                "[消化系统疾病][yg004][慢性胰腺炎][CFTR][rs75789129][0][--][--][1.0][20.3]\n" +
                "[消化系统疾病][yg004][慢性胰腺炎][CFTR][K483Stop][DD][1.0][正常][1.00][20.3]\n" +
                "[消化系统疾病][yg004][慢性胰腺炎][CFTR][K483Stop][ID][0.0][风险][2.00][20.3]\n" +
                "[消化系统疾病][yg004][慢性胰腺炎][CFTR][K483Stop][II][0.0][风险][2.00][20.3]\n" +
                "[消化系统疾病][yg004][慢性胰腺炎][CFTR][K483Stop][0][--][--][1.0][20.3]\n" +
                "[消化系统疾病][yg004][慢性胰腺炎][CFTR][rs213950][AA][0.131][风险][1.21][20.3]\n" +
                "[消化系统疾病][yg004][慢性胰腺炎][CFTR][rs213950][AG][0.512][风险][1.04][20.3]\n" +
                "[消化系统疾病][yg004][慢性胰腺炎][CFTR][rs213950][GG][0.357][正常][0.87][20.3]\n" +
                "[消化系统疾病][yg004][慢性胰腺炎][CFTR][rs213950][0][--][--][1.0][20.3]\n" +
                "[消化系统疾病][yg004][慢性乙型肝炎][IL10][rs1800872][TT][0.451][正常][0.8][22.3]\n" + /*等级标准：0.8 较低；1.0 平均；1.2 关注*/
                "[消化系统疾病][yg004][慢性乙型肝炎][IL10][rs1800872][GT][0.45][风险][1.0][22.3]\n" +
                "[消化系统疾病][yg004][慢性乙型肝炎][IL10][rs1800872][GG][0.099][风险][1.2][22.3]\n" +
                "[消化系统疾病][yg004][慢性乙型肝炎][IL10][rs1800872][0][--][--][1.0][22.3]\n" +
                "[@FORMULA][@RESULT_CELL_x_10][@GROUP_COLUMN_2][@RESULT_TYPE_DOUBLE][var result=1; var val1=@CELL_0_8; var val2=@CELL_1_8; var val3=@CELL_2_8; if(null==val2){val2=1;} if(null==val3){val3=1;} result=val1*val2*val3*@CELL_0_9;]\n" +
                "[@FORMULA][@RESULT_CELL_x_11][@GROUP_COLUMN_2][@RESULT_TYPE_INT][var result=1; var val1=@CELL_0_8; var val2=@CELL_1_8; var val3=@CELL_2_8; if(null==val2){val2=1;} if(null==val3){val3=1;} var value = val1*val2*val3; result = value;]\n" +
                "[@RESULT_DSP_PARAM_4_5]",
        };

        GeneSiteDetectionProcessor processor = GeneSiteDetectionProcessor.newInstance();
        processor.setDetection(arrayDSP[2]);
        String sexNot = "女";

        String[] titles    = processor.getTitles();
        int      titleSize = processor.getTitlesSize();

        StringBuilder cell = new StringBuilder();
        for (int r = 0; r < processor.lPercent.length; r ++) {
            for (int c = 0; c < processor.lPercent[0].length; c++) {
                cell.append("[").append(processor.lPercent[r][c]).append("]");
            }
            System.out.println(cell.toString());
            cell.setLength(0);
        }
        System.out.println("\n\n");

        Object[][] lResPer = processor.calculateResult(result[0], resultParamIn, 0, 1, Arrays.asList(new String[]{sexNot}));

        StringBuilder row = new StringBuilder();
        for (int r = 0; r < lResPer.length; r ++) {
            for (int c = 0; c < lResPer[0].length; c++) {
                row.append("[").append(lResPer[r][c]).append("]");
            }
            System.out.println(row.toString());
            row.setLength(0);
        }
        System.out.println("\n\n\n");
    }
    //=============================================
    //           Test -- start
    //=============================================















    public static final String      ResultType          = "@RESULT_TYPE_";
    public static final String      ResultTypeInt       = "@RESULT_TYPE_INT";
    public static final String      ResultTypeBool      = "@RESULT_TYPE_BOOL";
    public static final String      ResultTypeLong      = "@RESULT_TYPE_LONG";
    public static final String      ResultTypeFloat     = "@RESULT_TYPE_FLOAT";
    public static final String      ResultTypeDouble    = "@RESULT_TYPE_DOUBLE";
    public static final String      ResultTypeString    = "@RESULT_TYPE_STRING";


    public static final String      FormulaMark     = "[@FORMULA]";
    public static final String      GroupColumn     = "@GROUP_COLUMN_";
    public static final String      ResultCell      = "@RESULT_CELL_";
    public static final String      Formula         = "var result";
    public static final String      Cell            = "@CELL_";
    public static final String      ResultDSPParam  = "@RESULT_DSP_PARAM_";
    public static final String      ResultNoChanged = "nochanged";


    private String          detection;
    private String[]        titles;
    private int             titlesSize;
    private Integer[]       dspParamIdxs;
    private Object[][]      lPercent;
    private List<Formula>   lFormula;
    private ScriptEngine    javascriptEngine;
    private final Formula   utility = new Formula();


    public static final GeneSiteDetectionProcessor newInstance() { return new GeneSiteDetectionProcessor(); }
    public static final GeneSiteDetectionProcessor newInstance(String detection) { return new GeneSiteDetectionProcessor(detection); }
    private GeneSiteDetectionProcessor(){ ScriptEngineManager manager = new ScriptEngineManager(); javascriptEngine = manager.getEngineByName("javascript"); }
    private GeneSiteDetectionProcessor(String detection) { this(); setDetection(detection); }


    public String[] getTitles() {
        String[] resTitles = null==titles ? null : new String[titlesSize];
		if (null==resTitles) { return resTitles; }
        System.arraycopy(titles, 0, resTitles, 0, titlesSize);
        return resTitles;
    }

    public int getTitlesSize() { return titlesSize; }

    public void setDetection(String detection) {
        this.detection = detection;
        parse();
    }

    private void parse() {
        titles      = null;
        titlesSize  = 0;
        lPercent    = null;
        lFormula    = null;
        dspParamIdxs= null;
        if (null==detection || detection.trim().isEmpty()) {
            return;
        }
        else {
            List<String>   lines            = readTextByLine(detection);
            if (null==lines || lines.isEmpty()) {
                return;
            }

            String         strResDspParam   = null;
            String         strTitle         = null;
            List<String>   detectionPercent = new ArrayList<>();
            List<String>   detectionFormula = new ArrayList<>();

            int     rowIdx = 0;
            for (String line : lines) {
                if (0==rowIdx) {
                    strTitle = line;
                }
                else {
                    if (line.startsWith(FormulaMark)) {
                        detectionFormula.add(line);
                    }
                    else if (line.contains(ResultDSPParam)) {
                        strResDspParam = line;
                    }
                    else {
                        detectionPercent.add(line);
                    }
                }
                rowIdx ++;
            }

            dspParamIdxs = utility.getResultDSPParamIdx(strResDspParam, titles);
            titles       = utility.getColumn(strTitle);
            titlesSize   = null==titles ? 0 : titles.length;
            lPercent     = utility.parseDSP(detectionPercent, titlesSize);
            if (null!=detectionFormula && !detectionFormula.isEmpty()) {
                lFormula = new ArrayList<>();
                for (String df : detectionFormula) {
                    Formula f = new Formula();
                    f.setFormula(df);
                    f.setTitles(titles);
                    f.parse();
                    lFormula.add(f);
                }
            }
        }
    }

    private List<String> readTextByLine(String text) {
        if (null==text || text.trim().isEmpty()) { return null; }
        try {
            BufferedReader reader   = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(text.getBytes("UTF-8"))));
            List<String>   lines    = new ArrayList<>();

            String  strRow = null;
            while (null!=(strRow=reader.readLine())) {
                lines.add(strRow);
            }
            return lines;
        }
        catch (Exception ex){}
        return null;
    }

    public Object[][] calculateResult(String result, Integer[] resultParamIdx,
                                      Integer resultGeneSiteIdx, /*基因结果结果当中基因位点是那一列*/
                                      Integer resultGeneTypeIdx, /*基因结果结果当中基因型是那一列*/
                                      List<String> genderNot) {
        List<String> resultLines = readTextByLine(result);
        if (null==resultLines || resultLines.isEmpty()) { return null; }

        Object[][] lResult       = utility.parseDSP(resultLines, titlesSize);
        Object[][] lResultPercent= utility.getResultDSP(lPercent, lResult, dspParamIdxs, resultParamIdx, resultGeneSiteIdx, resultGeneTypeIdx, genderNot);

        if (null!=lFormula && !lFormula.isEmpty()) {
            for (Formula f : lFormula) {
                f.calculateFormula(lResultPercent, javascriptEngine);
            }
        }

        Object[][] newResPer = new Object[lResultPercent.length+1][lResultPercent[0].length];
        System.arraycopy(lResultPercent, 0, newResPer,    1, lResultPercent.length);
        System.arraycopy(titles,  0, newResPer[0], 0, titlesSize);
        for (int i = 0, count = newResPer.length; i < count; i ++) {
            try {
                if ("0".equals(""+newResPer[i][dspParamIdxs[resultGeneTypeIdx]])) {
                    newResPer[i][dspParamIdxs[resultGeneTypeIdx]] = "--";
                }
            }
            catch (Exception ex) {}
        }

        return newResPer;
    }



    //=====================================================================
    //             Formula
    //=====================================================================
    public static class Formula {

        public static class GroupIndex {
            int start = 0;
            int end   = 0;
        }

        public static class LogicCell {
            Integer row = null;
            Integer col = null;
            Object  val = null;
        }

        String[]    titles          = null;
        String      formula         = null;

        LogicCell   resultCell      = null;
        String      resultType      = null;
        int[]       groupColumnIdx  = null;
        List<LogicCell> logicCells  = null;
        String      logicFormula    = null;

        public void setFormula(String formula) {
            this.formula = formula;
            if (null!=this.formula && !this.formula.isEmpty()) {
                this.formula = this.formula.replace(FormulaMark, "");
            }
        }
        public void setTitles(String[] titles) { this.titles = titles; }


        private String       getResultType(String formula, String[] titles) {
            String[]    columns = getColumn(formula);
            String      column  = null;
            if (null==columns || columns.length==0) { return null; }

            for (int i = 0, count = columns.length; i < count; i ++) {
                column = columns[i];
                if (column.startsWith(ResultType)) { return column; }
            }

            return null;
        }

        private LogicCell    getResultCell(String formula, String[] titles) {
            String[] columns = getColumn(formula);
            if (null==columns || columns.length==0) { return null; }

            String      column  = null;
            String[]    splite  = null;
            for (int i = 0, count = columns.length; i < count; i ++) {
                column = columns[i];

                if (column.startsWith(ResultCell)) {
                    column = column.replace(ResultCell, "");
                    splite = column.split("_");
                    if (null==splite || splite.length==0 && splite.length!=2) {
                        continue;
                    }

                    LogicCell resCell = new LogicCell();
                    try { resCell.row = Integer.parseInt(splite[0]); } catch (Exception ex){} // row
                    try { resCell.col = Integer.parseInt(splite[1]); } catch (Exception ex){} // col

                    if (null==resCell.row) { resCell.row = getTitleIndex(splite[0], titles); }
                    if (null==resCell.col) { resCell.col = getTitleIndex(splite[1], titles); }

                    return resCell;
                }
            }

            return null;
        }

        private int[]        getGroupColumn(String formula, String[] titles) {
            String[] columns = getColumn(formula);
            if (null==columns || columns.length==0) { return null; }

            List<Integer> result = new ArrayList<>();

            String      column = null;
            String[]    split = null;
            for (int i = 0, count = columns.length; i < count; i ++) {
                column = columns[i];

                if (column.startsWith(GroupColumn)) {
                    column = column.replace(GroupColumn, "");
                    split = column.split("_");
                    if (null==split || split.length==0) { continue; }

                    for (String integer : split) {
                        Integer intg = null;
                        try { intg = Integer.parseInt(integer); } catch (Exception ex){}

                        if (null==intg) { intg = getTitleIndex(integer, titles); }

                        if (null!=intg) { result.add(intg); }
                    }
                }
            }

            if (result.isEmpty()) { return null; }

            int[] aInt = new int[result.size()];
            for (int idx = 0, count = result.size(); idx < count; idx ++) {
                Integer tmp = result.get(idx);
                aInt[idx] = tmp;
            }

            return aInt;
        }

        private List<LogicCell>  getLogicCell(String formula, String[] titles) {
            String[] columns = getColumn(formula);
            if (null==columns || columns.length==0) { return null; }

            // get formula
            String  strFormula  = null;
            String  column      = null;
            for (int i = 0, count = columns.length; i < count; i ++) {
                column = columns[i];
                if (null!=column && column.trim().startsWith(Formula)) {
                    strFormula = column.trim();
                    break;
                }
            }

            // get cell size
            int     cellSize    = 0;
            for (int idx = 0; idx < strFormula.length(); idx ++) {
                idx = strFormula.indexOf(Cell, idx);
                if (idx < 0) { break; }
                cellSize ++;
            }
            if (cellSize<=0) { return null; }

            // get cell
            List<LogicCell> cells   = new ArrayList<>();
            String[]        split   = null;
            cellSize = 0;
            for (int idx = 0, count = strFormula.length(); idx < count; idx ++) {
                idx     = strFormula.indexOf(Cell, idx);
                if (idx < 0) { break; }

                StringBuilder rowOrCol = new StringBuilder();
                int rcIdx = 0;
                for (rcIdx = idx+Cell.length(); rcIdx < count; rcIdx ++) {
                    char ch = strFormula.charAt(rcIdx);
                    if ("0123456789_x".indexOf(ch)<0) { break; }
                    rowOrCol.append(ch);
                }
                idx = rcIdx-1;

                split   = rowOrCol.toString().split("_");
                if (null==split || split.length==0 || split.length!=2) {
                    continue;
                }

                LogicCell logicCell = new LogicCell();
                try { logicCell.row = Integer.parseInt(split[0]); } catch (Exception ex){} // row
                try { logicCell.col = Integer.parseInt(split[1]); } catch (Exception ex){} // col

                if (null==logicCell.row) { logicCell.row = getTitleIndex(split[0], titles); }
                if (null==logicCell.col) { logicCell.col = getTitleIndex(split[1], titles); }

                cells.add(logicCell);

                if (idx < 0) { break; }
                cellSize ++;
            }

            return cells;
        }

        private String       getLogicFormula(String formula) {
            String[] columns = getColumn(formula);
            if (null==columns || columns.length==0) { return null; }

            String  strFormula  = null;
            String  column      = null;
            for (int i = 0, count = columns.length; i < count; i ++) {
                column = columns[i];
                if (null!=column && column.trim().startsWith(Formula)) {
                    strFormula = column.trim();
                    break;
                }
            }

            return strFormula;
        }

        private Integer      getTitleIndex(String t, String[] titles) {
            if (null==t || t.isEmpty()) { return null; }
            if (null==titles || titles.length==0) { return null; }

            for (int titleIdx = 0; titleIdx < titles.length; titleIdx ++) {
                if (!t.equals(titles[titleIdx])) { continue; }
                return titleIdx;
            }

            return null;
        }

        public void     parse() {
            resultCell      = getResultCell(formula, titles);
            resultType      = getResultType(formula, titles);
            groupColumnIdx  = getGroupColumn(formula, titles);
            logicCells      = getLogicCell(formula, titles);
            logicFormula    = getLogicFormula(formula);
        }

        public void     calculateFormula(Object[][] dsp, ScriptEngine scriptEngine) {
            if (null==dsp || dsp.length==0) { return; }

            List<GroupIndex>    groupIndexs = groupColumnIndex(dsp);

            if (null==groupIndexs || groupIndexs.isEmpty()) {
                if (null==logicCells || logicCells.isEmpty()) {
                    resultCell.val = resultValue(logicFormula, scriptEngine);
                    setResultValue(resultCell, null, dsp);
                }
                else {
                    fillLogicCells(logicCells, null, dsp);
                    String tmpLogicFormula = replceLogicCellsInFormula(logicFormula, logicCells);
                    resultCell.val = resultValue(tmpLogicFormula, scriptEngine);
                    setResultValue(resultCell, null, dsp);
                }
            }
            else {
                for (GroupIndex gI : groupIndexs) {
                    if (null==logicCells || logicCells.isEmpty()) {
                        resultCell.val = resultValue(logicFormula, scriptEngine);
                        setResultValue(resultCell, gI, dsp);
                    }
                    else {
                        fillLogicCells(logicCells, gI, dsp);
                        String tmpLogicFormula = replceLogicCellsInFormula(logicFormula, logicCells);
                        resultCell.val = resultValue(tmpLogicFormula, scriptEngine);
                        setResultValue(resultCell, gI, dsp);
                    }
                }
            }
        }

        private boolean groupColumnEqual(Object[] column, String[] groupColumn, int[] groupColumnIdx) {
            if (null==groupColumnIdx) { return true; }
            if (null==column && null==groupColumn) { return true; }
            if (null==column && null!=groupColumn) { return false; }
            if (null!=column && null==groupColumn) { return false; }

            boolean equal = true;
            for (int gcIdx = 0, count = groupColumnIdx.length; gcIdx < count; gcIdx ++) {
                if (equal && null==groupColumn[gcIdx] && null==column[groupColumnIdx[gcIdx]]) { equal = true; }
                if (equal && null!=groupColumn[gcIdx] && null==column[groupColumnIdx[gcIdx]]) { equal = false; }
                if (equal && null==groupColumn[gcIdx] && null!=column[groupColumnIdx[gcIdx]]) { equal = false; }
                if (equal && !groupColumn[gcIdx].equals(column[groupColumnIdx[gcIdx]])) { equal = false; }

                if (!equal) { break; }
            }

            return equal;
        }

        private void    groupColumnCopy(Object[] column, String[] groupColumn, int[] groupColumnIdx) {
            if (null==groupColumnIdx) { return; }
            if (null==column && null==groupColumn) { return; }
            if (null==column && null!=groupColumn) { return; }
            if (null!=column && null==groupColumn) { return; }

            boolean equal = true;
            for (int gcIdx = 0, count = groupColumnIdx.length; gcIdx < count; gcIdx ++) {
                groupColumn[gcIdx] = (String)column[groupColumnIdx[gcIdx]];
            }

            return;
        }

        private List<GroupIndex> groupColumnIndex(Object[][] dsp) {
            if (null==dsp || dsp.length==0) { return null; }

            List<GroupIndex>    groupIndexes = new ArrayList<>();
            GroupIndex          groupIndex  = null;
            if (null==groupColumnIdx) {
                groupIndex          = new GroupIndex();
                groupIndex.start    = 0;
                groupIndex.end      = dsp.length-1;
                groupIndexes.add(groupIndex);
                return groupIndexes;
            }

            String[]            group       = new String[groupColumnIdx.length];
            for (int rowIdx = 0; rowIdx < dsp.length; rowIdx ++) {
                if (!groupColumnEqual(dsp[rowIdx], group, groupColumnIdx)) {
                    if (groupIndexes.isEmpty()) {
                        groupColumnCopy(dsp[rowIdx], group, groupColumnIdx);
                        groupIndex = new GroupIndex();
                        groupIndex.start = rowIdx;
                        groupIndexes.add(groupIndex);
                    }
                    else {
                        groupColumnCopy(dsp[rowIdx], group, groupColumnIdx);
                        groupIndex.end = rowIdx - 1;
                        groupIndex = new GroupIndex();
                        groupIndex.start = rowIdx;
                        groupIndexes.add(groupIndex);
                    }
                }
            }
            if (null!=groupIndex) {
                groupIndex.end = dsp.length - 1;
            }

            return groupIndexes;
        }

        private void    fillLogicCells(List<LogicCell> logicCells, GroupIndex groupIndex, Object[][]dsp) {
            if (null==logicCells || logicCells.isEmpty()) { return; }
            if (null==dsp || dsp.length==0) { return; }

            for (LogicCell lc : logicCells) {
                int colIdx = null!=lc.col ? lc.col : 0;
                int rowIdx = 0;
                if (null!=lc.row) {
                    if (null==groupIndex) { rowIdx = lc.row; }
                    else { rowIdx = groupIndex.start+lc.row; }
                }
                else {
                    if (null==groupIndex) { rowIdx = 0; }
                    else { rowIdx = groupIndex.start; }
                }

                if (rowIdx<=groupIndex.end && rowIdx>=groupIndex.start) {
                    lc.val = dsp[rowIdx][colIdx];
                }
                else {
                    lc.val = null;
                }
            }
        }

        private String  replceLogicCellsInFormula(String logicFormula, List<LogicCell> logicCells) {
            if (null==logicFormula || logicFormula.isEmpty()) { return null; }
            if (null==logicCells   || logicCells.isEmpty()) { return logicFormula; }

            String result = logicFormula;
            String cell   = null;
            for (LogicCell lc : logicCells) {
                cell = Cell + (null==lc.row ? "x" : lc.row) + "_" + (null==lc.col ? "x" : lc.col);
                result = result.replace(cell, (null==lc.val ? "null" : lc.val.toString()));
            }

            return result;
        }

        private Object  resultValue(String logicF, ScriptEngine scriptEngine) {
            Object val = null;
            try {
                scriptEngine.eval(logicF);
                val = scriptEngine.get("result");
                if (null!=val) {
                    if (null==val) {
                        val = null;
                    }
                    else if (ResultTypeInt.equalsIgnoreCase(resultType)) {
                        if (val instanceof Double) { val = ((Double) val).intValue(); }
                        else if (val instanceof Float) { val = ((Float) val).intValue(); }
                        else { val = ((Integer) val).intValue(); }
                    }
                    else if (ResultTypeLong.equalsIgnoreCase(resultType)) {
                        val = ((Double) val).longValue();
                    }
                    else if (ResultTypeFloat.equalsIgnoreCase(resultType)) {
                        val = ((Double) val).floatValue();
                    }
                    else if (ResultTypeDouble.equalsIgnoreCase(resultType)) {
                        val = ((Double) val).doubleValue();
                    }
                    else if (ResultTypeBool.equalsIgnoreCase(resultType)) {
                        val = (Boolean) val;
                    }
                    else if (ResultTypeString.equalsIgnoreCase(resultType)) {
                        val = (String) val;
                    }
                }
            }
            catch (Exception ex) {ex.printStackTrace();}
            return val;
        }

        private void    setResultValue(LogicCell resultCell, GroupIndex groupIndex, Object[][] dsp) {
            if (null==resultCell) { return; }
            if (null==dsp || dsp.length==0) { return; }
            if ((resultCell.val instanceof String) && ResultNoChanged.equalsIgnoreCase((String)resultCell.val)) { return; }

            Integer row = resultCell.row;
            Integer col = resultCell.col;

            if (null==row && null==col) { return; }
            if (null!=row && null!=col) {
                if (null==groupIndex) {
                    dsp[row][col] = resultCell.val;
                }
                else {
                    dsp[row+groupIndex.start][col] = resultCell.val;
                }
                return;
            }
            if (null!=row && null==col) {
                if (null==groupIndex) {
                    for (int i = 0; i < dsp[0].length; i++) {
                        dsp[row][i] = resultCell.val;
                    }
                }
                else {
                    for (int i = 0; i < dsp[0].length; i++) {
                        dsp[row+groupIndex.start][i] = resultCell.val;
                    }
                }
                return;
            }
            if (null==row && null!=col) {
                if (null==groupIndex) {
                    for (int i = 0; i < dsp.length; i++) {
                        dsp[i][col] = resultCell.val;
                    }
                }
                else {
                    for (int r = groupIndex.start; r <= groupIndex.end; r ++) {
                        dsp[r][col] = resultCell.val;
                    }
                }
                return;
            }
        }

        //============================================
        //    utility
        //============================================
        public Integer[]getResultDSPParamIdx(String resultDspParam, String[] titles) {
            if (null==resultDspParam || resultDspParam.trim().isEmpty()) { return null; }

            resultDspParam  = resultDspParam.substring(1, resultDspParam.length()-1);
            resultDspParam  = resultDspParam.replace(ResultDSPParam, "");
            String[] strIdxs= resultDspParam.split("_");

            List<Integer> idxs = new ArrayList<>();
            Integer i = null;
            for (String si : strIdxs) {
                i = null;
                try { i = Integer.parseInt(si); } catch (Exception ex){} // row
                if (null==i) { i = getTitleIndex(si, titles); }

                if (null!=i) { idxs.add(i); }
            }

            if (idxs.isEmpty()) { return null; }
            return idxs.toArray(new Integer[idxs.size()]);
        }

        public String[]     getColumn(String title) {
            if (null==title || title.trim().isEmpty()) { return null; }

            StringBuilder regex         = new StringBuilder();
            regex.append('\\').append(']').append('\\').append('[');
            String[]      columns       = title.substring(1, title.length()-1).split(regex.toString());
            return columns;
        }

        public Object[][]   parseDSP(List<String> dsp, int columnSize) {
            if (null==dsp || dsp.isEmpty()) { return null; }

            String[]      columns       = null;
            StringBuilder regex         = new StringBuilder();
            regex.append('\\').append(']').append('\\').append('[');

            int         rowSize     = 0;
            String      tmp         = null;
            Object[][]  arrayDSP    = new Object[dsp.size()][columnSize];

            for (int row = 0; row < arrayDSP.length; row ++) {
                tmp = dsp.get(row);

                tmp = tmp.substring(1, tmp.length()-1);
                columns = tmp.split(regex.toString());

                for (int col = 0; col < columnSize; col ++) {
                    if (col < columns.length) {
                        tmp = columns[col];
                    }
                    else {
                        tmp = null;
                    }
                    Object val = null;
                    if (null==val) {try { val = Integer.parseInt(tmp); } catch (Exception ex) {}}
                    if (null==val) {try { val = Long.parseLong(tmp); } catch (Exception ex) {}}
                    if (null==val) {try { val = Float.parseFloat(tmp); } catch (Exception ex) {}}
                    if (null==val) {try { val = Double.parseDouble(tmp); } catch (Exception ex) {}}
                    if (null==val && ("true".equalsIgnoreCase(tmp) || "false".equalsIgnoreCase(tmp))) {try { val = Boolean.parseBoolean(tmp); } catch (Exception ex) {}}
                    if (null==val) { val = tmp; }
                    if ("N/A".equalsIgnoreCase(tmp)) { val = null; }

                    arrayDSP[rowSize][col] = val;
                }

                rowSize ++;
            }


            Object[][]  rArrayDSP   = new Object[rowSize][columnSize];
            System.arraycopy(arrayDSP, 0, rArrayDSP, 0, rowSize);
            arrayDSP = null;
            return rArrayDSP;
        }

        public  Object[][]  getResultDSP(Object[][] dsp, Object[][] result,
                                         Integer[] dspCompareColumn, Integer[] resultCompareColumn,
                                         Integer resultGeneSiteIdx, /*基因结果结果当中基因位点是那一列*/
                                         Integer resultGeneTypeIdx, /*基因结果结果当中基因型是那一列*/
                                         List<String> genderNot
        ) {
            if (null==dsp || dsp.length == 0) { return null; }
            if (null==result || result.length == 0) { return null; }
            if (null==dspCompareColumn || dspCompareColumn.length == 0) { return null; }
            if (null==resultCompareColumn || resultCompareColumn.length == 0) { return null; }


            StringBuilder   key     = new StringBuilder();
            int             rowSize = 0;
            Object[][]      destDSP = new Object[dsp.length][dsp[0].length];


            for (int row = 0; row < dsp.length; row ++) {
                key.setLength(0);

                // 判断性别是否符合剔除条件
                if (null!=genderNot && !genderNot.isEmpty()) {
                    Object tmp  = null;
                    boolean containt = false;
                    for (String g : genderNot) {
                        for (int col = 1, count = null == dsp[0] ? 0 : dsp[0].length; col < count; col++) {
                            tmp = dsp[row][col];
                            if (!(tmp instanceof String)) { continue; }
                            if (((String) tmp).contains(g)) { containt = true; break;}
                        }
                        if (containt) { break; }
                    }
                    if (containt) { continue; }
                }

                // 判读位点是否是指定的基因型
                Map<String, String> geneSiteChange = new HashMap<>();
                geneSiteChange.put("rs67666821", null);
                geneSiteChange.put("rs397508209", "K483Stop");
                geneSiteChange.put("rs5030655", null);
                boolean equal    = false;
                Object  resObj   = null;
                Object  dspObj   = null;
                Object  gnSite   = null;
                int     equalNum = 0;
                for (int resRow = 0; resRow < result.length; resRow ++) {
                    equalNum = 0;
                    for (int col = 0; col < dspCompareColumn.length; col++) {
                        dspObj   = dsp[row][dspCompareColumn[col]];
                        resObj   = result[resRow][resultCompareColumn[col]];
                        if (geneSiteChange.containsKey(""+result[resRow][resultGeneSiteIdx])) {
                            if ("T.DEL".equalsIgnoreCase("" + resObj) || "DEL.T".equalsIgnoreCase("" + resObj)) { resObj = "ID"; }
                            else if ("DEL".equalsIgnoreCase("" + resObj)) { resObj = "DD"; }
                            else if ("TT".equalsIgnoreCase("" + resObj)) { resObj = "II"; }
                            if ("rs397508209".equalsIgnoreCase("" + resObj)) { resObj = geneSiteChange.get(resObj); }
                        }
                        if (compare(dspObj, resObj, resultCompareColumn[col]==resultGeneTypeIdx)) {
                            equalNum++;
                        }
                    }
                    if (equalNum==resultCompareColumn.length) { equal = true; }
                }
                if (!equal) { continue; }


                System.arraycopy(dsp[row], 0, destDSP[rowSize], 0, dsp[row].length);
                rowSize ++;
            }

            Object[][]  resultDSP   = new Object[rowSize][dsp[0].length];

            System.arraycopy(destDSP, 0, resultDSP, 0, rowSize);
            return resultDSP;
        }

        //============================================================
        //        判读位点是否是指定的基因型，基因型次序有可能颠倒
        //============================================================
        private boolean compare(Object dsp, Object result, boolean isResultGeneType) {
            if (isResultGeneType) {
                String strDsp    = ""+dsp;
                String strResult = ""+result;
                if (strResult.length()!=strDsp.length()) { return false; }

                StringBuilder resNoDuplicated = new StringBuilder();
                StringBuilder dspNoDuplicated = new StringBuilder();
                Map<Character, Integer> resNoDuplicatedSet = new HashMap<>();
                Map<Character, Integer> dspNoDuplicatedSet = new HashMap<>();
                for (int i = 0, count = strResult.length(); i < count; i ++) {
                    char resC = strResult.charAt(i);
                    if (!resNoDuplicatedSet.containsKey(resC)) {
                        resNoDuplicated.append(resC);
                        resNoDuplicatedSet.put(resC, null);
                    }
                    char dspC = strDsp.charAt(i);
                    if (!dspNoDuplicatedSet.containsKey(dspC)) {
                        dspNoDuplicated.append(dspC);
                        dspNoDuplicatedSet.put(dspC, null);
                    }
                }


                strDsp    = dspNoDuplicated.toString();
                strResult = resNoDuplicated.toString();
                if (strResult.length()!=strDsp.length()) { return false; }

                boolean equal = true;
                for (int i = 0, count = strResult.length(); i < count; i ++) {
                    char c = strResult.charAt(i);
                    if (strDsp.indexOf(c)<0) { equal = false; break; }
                }
                return equal;
            }
            else {
                return (""+dsp).equals(""+result);
            }
        }
    }
}
